{
  "Environment": "Production",

  "ConnectionStrings": {
    // Database connection strings
    "SyncAgent": "Server=secret;Initial Catalog=SyncAgent;Trusted_Connection=yes;Encrypt=no;",
    "Default": "Server=secret;Initial Catalog=secret;Trusted_Connection=yes;Encrypt=no;",
    "DMS": "Server=secret;Initial Catalog=secret;Trusted_Connection=yes;Encrypt=no;"
  },

  "api": {
    "api": "secrets.json",
    "key": "secrets.json"
  },

  "syncJobs": {
    "Daily": [ "Currency", "Office" ],
    "Hourly": [ "Staff", "Client", "Matter" ],
    //"NearRealTime": [ "Bills", "ApplyCash", "CancelBills" ]
  },

  "syncSets": {
    // SQL Formatter & Minifier: https://codebeautify.org/sqlformatter
    "Template": {
      "enabled": "false", // Optional. Determines whether or not this sync set should ever be run. The default value is true
      "url": "", // API Endpoint, relative to the API's root Url, to send the data to
      "verb": "", // Optional. Describes the HTTP verb to use when sending data to the API. The default value is POST
      "connection": "", // Optional. Name of the connection string to use. The default is Default
      "sql": "", // SQL string, including parameters (prefixed with @) for any 'progress' elements
      "progress": [], // Array of fields to store locally to record sync progress
      "additionalData": [
        {
          "connection": "", // Optional. Name of the connection string to use. The default is the connection used by the parent query
          "sql": "select [field list] from [tablename] where code1=@ClientCode and code2=@MatterNumber" // SQL statement to run for every record returned by the parent SQL. Fields from the parent recordset may be included as parameters
        }
      ],
      "files": [
        {
          "path": "", // Path to a file to upload with each record (if it exists). The path may include fields returned in the parent or additionalData queries, provided they are within curly brackets
          "name": "{prebillnumber}.RTF" // Optional. Name of the file to upload. Defaults to the filename from the path. This may also include fields returned in the parent or additionalData queries, provided they are within curly brackets
        }
      ],
      "collections": {
        // Additional collection properties on each record. These SQL statements will be executed against the same connection as the parent query and may include any of the fields from the parent recordset as parameters
        "bills": {
          "connection": "", // Optional. Name of the connection string to use. The default is the connection used by the parent query
          "sql": "select ... where BILL_UNO=@BillUno"
        },
      },
    },
    "Currency": {
      "url": "Currency",
      "sql": "select IsoCode = IsNull(IMPORT_CODE, CURRENCY_CODE), Description = CURRENCY_DESC, LastModified = LAST_MODIFIED, Symbol = CURRENCY_SYMBOL, Decimals = DECIMAL_PLACES, IsActive = case INACTIVE when 'N' then 1 else 0 end FROM TBL_CURRENCY WHERE LAST_MODIFIED > IsNull(@LastModified,'1900-01-01') order by LastModified, IsoCode",
      "progress": [ "LastModified" ]
    },
    "Office": {
      "url": "Office",
      "sql": "SELECT Code=OFFC_CODE, Description=OFFC_DESC, Currency=IsNull(c.IMPORT_CODE, c.CURRENCY_CODE), IsActive=case when o.INACTIVE='N' then 1 else 0 end, Custom_Foo='foo', Custom_Bar='bar', LastModified=o.LAST_MODIFIED FROM HBL_OFFICE o INNER JOIN TBL_CURRENCY c on (o.CURRENCY_CODE=c.CURRENCY_CODE) WHERE o.LAST_MODIFIED > IsNull(@LastModified,'1900-01-01') order by LastModified, Code",
      "progress": [ "LastModified" ]
    },
    "Staff": {
      "url": "Employee",
      "sql": "select Code = rtrim(p.EMPLOYEE_CODE) , FirstName = rtrim(n.FIRST_NAME) , LastName = rtrim(n.LAST_NAME) , FullName = rtrim(n.NAME) , JobTitle = rtrim(p.POSITION) , UserName = rtrim(lower(p.LOGIN)) , Email = rtrim(lower(n.INTERNET_ADDR)) , OfficeCode = rtrim(p.OFFC) , DeptCode = rtrim(p.DEPT) , ProfCode = rtrim(p.PROF) , Phone = case when len(p.phone_no)>=6 then rtrim(p.PHONE_NO) else null end , Extension = case when len(p.phone_no)<6 then rtrim(p.PHONE_NO) else null end , IsActive = case p.INACTIVE when 'N' then 1 else 0 end , LastModified = p.LAST_MODIFIED , StartDate = p.HIRE_DATE , EndDate = p.TERMINATE_DATE from hbm_persnl p left join HBM_NAME n on (p.NAME_UNO=n.NAME_UNO) where len(isnull(p.employee_code,''))>0 and len(isnull(p.login,''))>0 and p.PERSNL_TYP_CODE not in ('SYST','SADM') and ( p.LAST_MODIFIED > IsNull(@LastModified,'1900-01-01') or n.LAST_MODIFIED > IsNull(@LastModified,'1900-01-01') ) order by LastModified, FullName",
      "progress": [ "LastModified" ]
    },
    "Client": {
      "url": "Client",
      "sql": "select Code = rtrim(c.CLIENT_CODE) , Name = rtrim(c.CLIENT_NAME) , Status = rtrim(c.STATUS_CODE) , OpenDate = c.OPEN_DATE , CloseDate = c.CLOSE_DATE , OfficeCode = rtrim(c.OFFC) , DeptCode = rtrim(c.DEPT) , ProfCode = rtrim(c.PROF) , LastModified = c.LAST_MODIFIED from HBM_CLIENT c where (c.LAST_MODIFIED = @LastModified and c.CLIENT_CODE > @Code) or c.LAST_MODIFIED > IsNull(@LastModified, '1900-01-01') order by LastModified, Code",
      "progress": [ "LastModified", "Code" ]
    },
    "Matter": {
      "url": "Matter",
      "sql": ";with cte as ( select Code = rtrim(m.CLNT_MATT_CODE) , Name = rtrim(m.LONG_MATT_NAME) , ShortCode = rtrim(m.matter_code) , Status = rtrim(m.STATUS_CODE) , OpenDate = m.OPEN_DATE , CloseDate = m.CLOSE_DATE , OfficeCode = rtrim(m.OFFC) , DeptCode = rtrim(m.DEPT) , ProfCode = rtrim(m.PROF) , CurrencyCode = rtrim(IsNull(x.IMPORT_CODE, x.CURRENCY_CODE)) , BillingName = rtrim(n.NAME) , BillingEmail = rtrim(isnull(n.INTERNET_ADDR, c.EMAIL)) , LastModified =(SELECT MAX(LastModified) FROM (VALUES (m.LAST_MODIFIED), (g.LAST_MODIFIED), (c.LAST_MODIFIED), (n.LAST_MODIFIED)) AS Value(LastModified)) from HBM_MATTER m left join TBM_MATTER t on (m.MATTER_UNO=t.MATTER_UNO) left join TBM_BILLGRP g on (t.BILLGRP_UNO=g.BILLGRP_UNO) left join TBL_CURRENCY x on (t.CURRENCY_CODE=x.CURRENCY_CODE) left join HBA_CLIENT_CONT c on (g.CONTACT_UNO=c.CONTACT_UNO) left join HBM_NAME n on (c.NAME_UNO=n.NAME_UNO) ) select * from cte where (LastModified = @LastModified and Code>@Code) or LastModified > IsNull(@LastModified, '1900-01-01') order by LastModified, Code",
      "progress": [ "LastModified", "Code" ],
      "additionalData": [
        {
          "connection": "DMS",
          "sql": "select LuggageTag = '[LuggageTag:' + rtrim(CLNT_MATT_CODE) + ']', DmsEmail=CLNT_MATT_CODE+'@dms.example.com' from HBM_MATTER m where m.CLNT_MATT_CODE=@Code                                                 "
        }
      ],
      "collections": {
        "Employees": {
          "sql": "select Code=rtrim(p.EMPLOYEE_CODE), Name=rtrim(p.EMPLOYEE_NAME) from HBM_MATTER m inner join HBM_PERSNL p on (p.EMPL_UNO in (m.BILL_EMPL_UNO, m.RESP_EMPL_UNO, m.ASSIGN_EMPL_UNO)) where m.CLNT_MATT_CODE=@Code and p.INACTIVE='N' order by Name"
        }
      }
    }
  },

  "InfrastructureServices": {
    // Configure which infrastructure services are to be used for each interface
    "IMailSendingService": "SmtpService",
    "IFileService": "FileSystemService",
    //"IFileService": "AzureBlobService"
  },

  "SmtpService": {
    // Configures how the SmtpService connects to the SMTP Server or Relay
    "Host": "my.smtp.server",
    "Port": 25,
    "From": "do.not.reply@example.com"
    //"OverrideRecipients": [ "override@example.com" ]
    //"Bcc": ["",""]
  },

  "FileSystemService": {
    "Root": "C:\\Temp\\ConsoleApp"
  },

  "AzureBlobService": {
    // See secrets.json
    "ContainerName": "",
    "AccountName": "",
    "AccountKey": ""
  },

  "Serilog": {
    // Logging configuration
    "Using": [ "Serilog.Sinks.Console", "Serilog.Sinks.File" ],
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Warning"
      }
    },
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "restrictedToMinimumLevel": "Debug",
          "theme": "Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console",
          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Method}({Line}) {Message:j}{NewLine}{Exception}"
        }
      },
      {
        "Name": "File",
        "Args": {
          "path": "logs/Diagnostics-.log",
          "rollingInterval": "Day",
          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {SourceContext}.{Method}({Line}) {Message:j}{NewLine}{Exception}"
        }
      }
    ]
  }
}
